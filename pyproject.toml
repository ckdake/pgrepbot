[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
name = "postgres-replication-manager"
version = "1.0.0"
description = "Centralized management of PostgreSQL logical replication across multi-cloud environments"
readme = "README.md"
license = {text = "MIT"}
authors = [
    {name = "PostgreSQL Replication Manager Team"},
]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.13",
    "Topic :: Database",
    "Topic :: System :: Systems Administration",
]
requires-python = ">=3.13"
dependencies = [
    "fastapi==0.117.1",
    "uvicorn[standard]==0.37.0",
    "asyncpg==0.30.0",
    "redis==5.0.1",
    "boto3==1.34.0",
    "pydantic==2.11.9",
    "python-jose[cryptography]==3.3.0",
    "python-multipart==0.0.18",
    "jinja2==3.1.6",
    "aiofiles==23.2.1",
    "apscheduler==3.10.4",
]

[project.optional-dependencies]
dev = [
    "pytest==8.4.2",
    "pytest-asyncio==0.21.1",
    "pytest-cov==6.0.0",
    "httpx==0.25.2",
    "ruff==0.13.2",
]
lint = [
    "ruff==0.13.2",
    "shellcheck-py==0.10.0.1",
    "pymarkdownlnt==0.9.32",
]

[project.urls]
Homepage = "https://github.com/ckdake/pgrepbot"
Repository = "https://github.com/ckdake/pgrepbot"
Issues = "https://github.com/ckdake/pgrepbot/issues"

[project.scripts]
pgrepman = "app.main:main"

[tool.ruff]
# Exclude a variety of commonly ignored directories.
exclude = [
    ".bzr",
    ".direnv",
    ".eggs",
    ".git",
    ".git-rewrite",
    ".hg",
    ".mypy_cache",
    ".nox",
    ".pants.d",
    ".pytype",
    ".ruff_cache",
    ".svn",
    ".tox",
    ".venv",
    "__pypackages__",
    "_build",
    "buck-out",
    "build",
    "dist",
    "node_modules",
    "venv",
]

# Allow longer lines for modern terminals
line-length = 120
indent-width = 4

# Assume Python 3.13
target-version = "py313"

[tool.ruff.lint]
# Enable pycodestyle (`E`) and Pyflakes (`F`) codes by default.
select = ["E", "F", "W", "I", "N", "UP", "B", "A", "C4", "T20"]
ignore = [
    "B008",  # Allow function calls in argument defaults (FastAPI Depends pattern)
]

# Allow fix for all enabled rules (when `--fix`) is provided.
fixable = ["ALL"]
unfixable = []

# Allow unused variables when underscore-prefixed.
dummy-variable-rgx = "^(_+|(_+[a-zA-Z0-9_]*[a-zA-Z0-9]+?))$"

[tool.ruff.format]
# Like Black, use double quotes for strings.
quote-style = "double"

# Like Black, indent with spaces, rather than tabs.
indent-style = "space"

# Like Black, respect magic trailing commas.
skip-magic-trailing-comma = false

# Like Black, automatically detect the appropriate line ending.
line-ending = "auto"

[tool.coverage.run]
source = ["app"]
omit = [
    "*/tests/*",
    "*/venv/*",
    "*/__pycache__/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "raise AssertionError",
    "raise NotImplementedError",
    "if __name__ == .__main__.:",
]
show_missing = true
precision = 2

[tool.coverage.html]
directory = "htmlcov"

[tool.pytest.ini_options]
minversion = "6.0"
addopts = [
    "-ra",
    "--strict-markers",
    "--strict-config",
    "--cov=app",
    "--cov-report=term-missing",
    "--cov-report=html",
    "--cov-fail-under=50",
]
testpaths = ["tests"]
markers = [
    "unit: Unit tests that don't require external services",
    "integration: Integration tests that require LocalStack/Redis/PostgreSQL",
    "e2e: End-to-end tests that test complete workflows",
    "performance: Performance and load tests",
    "security: Security-focused tests",
    "slow: Tests that take longer than 5 seconds",
]
asyncio_mode = "auto"
filterwarnings = [
    "ignore::DeprecationWarning:botocore.*",
    "ignore::DeprecationWarning:pydantic.*",
    "ignore::RuntimeWarning:asyncio.*",
]

[tool.hatch.build.targets.wheel]
packages = ["app"]